#include <18f4550.h>   // Libreria del Microcontrolador
#device adc = 10
#fuses XT, NOWDT, NOPROTECT, NOLVP, CPUDIV1, PLL1 // Fusibles (Configuraciones del microcontrolador)
#use delay(clock = 4M) // 4 Megahertz

#define D1 pin_d4
#define D2 pin_d5
#define D3 pin_d6
#define Motor pin_d0

void display(float);
void descomponer(int *, int *, int *, float);

int vec_c[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D,0x7D,0x07,0x7F,0x67}; // Numeros para display Catodo
int16 delay;

void main()
{
   float data;
   
   setup_adc(adc_clock_div_2); // Sincronizamos las frecuencias
   setup_adc_ports(AN0_TO_AN1 | VSS_VREF); // Hay un sensor en AN0 y AN1. Establecemos el rango de los bits de resolucion, dependendiendo un voltaje de referencia (Voltaje Maximo del sensor)
   set_tris_a(0b00000011); // 1 entrada 0 salida
   set_adc_channel(0);
   delay_us(10);
   
   while(true)
   {
      data = read_adc(); // Obtiene la lectura del sensor
      data *= (150.0/1023.0);
      for(int i = 0; i < 67; i++) // Hace que se actualize cada segundo
         display(data); // Recibe e imprime la temperatura. Tambien gira el motor en funcion de esta. (Tarda 15 ms)
   }
}

void display(float numero) // Tarda 15 ms
{ 
   int punto, n1, n2, n3;
   
   delay = (3000.0 / 150.0) * numero + 2000; // Convertimos la temperatura en un delay entre 0 y 5,000 us
   
   // Se descompone en 3 numeros
   descomponer( &n1, &n2, &n3, numero);
   
   // Los 3 numeros se distribuyen en el display
   
   // Encendemos primer display
   output_high(D2);
   output_high(D3);
   output_low(D1);
   
   if(numero < 10) // Un digito y dos decimales
      punto = 128; // Le sumamos para que el bit que activa el punto se active
   else
      punto = 0;
   
   output_b(vec_c[n1] + punto);
   
   // PWM con motor que abarca max 5 ms
   output_high(Motor);
   delay_us(delay);
   output_low(Motor);
   delay_us(5000-delay);
   
   
   // Encendemos segundo display
   output_high(D1);
   output_high(D3);
   output_low(D2);
   
   if((numero < 100) && !(numero < 10)) // Dos digitos y un decimal
      punto = 128; // Le sumamos para que el bit que activa el punto se active
   else
      punto = 0;
      
   output_b(vec_c[n2] + punto);
   
   // PWM con motor que abarca max 5 ms
   output_high(Motor);
   delay_us(delay);
   output_low(Motor);
   delay_us(5000-delay);
   
   // Encendemos tercer display
   output_high(D1);
   output_high(D2);
   output_low(D3);
   
   punto = 0;
      
   output_b(vec_c[n3] + punto);
   
   // PWM con motor que abarca max 5 ms
   output_high(Motor);
   delay_us(delay);
   output_low(Motor);
   delay_us(5000-delay);
}

void descomponer(int *n1, int *n2, int *n3, float numero)
{
   int16 entera;
   float aux, decimal;
   
   entera = (int16) numero; // Quitamos los decimales del numero
   decimal = numero - entera; // Quitamos la parte entera del numero
      
   // 0.03   entera = 0  decimal = 0.03
   if(numero < 10)
   {
      *n1 = entera; // Sacamos las unidades
      aux = decimal * 10; // Separamos el primer decimal 
      *n2 = (int) aux;
      aux -= (int) aux; // Borramos el primer decimal
      aux *= 10; // Separamos el segundo decimal
      *n3 = (int) aux;
   }
   else if(numero < 100)
   {
      *n1 = entera / 10; // Sacamos las decenas
      *n2 = entera - (*n1*10); // Sacamos las unidades
      aux = decimal * 10; // Separamos el primer decimal
      *n3 = (int) aux;
   }
   else if(numero < 1000)
   {
      *n1 = entera / 100; // Sacamos las centenas
      *n2 = entera / 10;
      *n2 -= (*n1*10); // Sacamos las decenas
      *n3 = entera - ((*n1*100) + (*n2*10)); // Sacamos las unidades
   }
}
