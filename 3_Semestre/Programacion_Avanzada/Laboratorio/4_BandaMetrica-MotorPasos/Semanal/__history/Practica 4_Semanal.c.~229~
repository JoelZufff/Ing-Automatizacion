#include <18f4550.h>   // Libreria del Microcontrolador
#device adc = 10
#fuses XT, NOWDT, NOPROTECT, NOLVP, CPUDIV1, PLL1, NOMCLR // Fusibles (Configuraciones del microcontrolador)
#use delay(clock = 4M) // 4 Megahertz

#define S1 pin_d4
#define S2 pin_d5
#define S3 pin_d6
#define S4 pin_d7
#define LED pin_c0

// Intervalo de MS
const int16 MAX = 1925;
const int16 MIN = 50;

void ROTAR(int16);
int SEC_I(); // Secuencia Inicial (No genera cola, ni respeta delay)
int SEC_R(int16, int16 *); // Secuencia con Retraso (Se utiliza para respetar delay)

int orden[25] = {0}; // Arreglo con orden de ejecucion de secuencias
int pos = 0; // Contador de secuencias en cola

void main()
{
   int posE = 0; // Contador de secuencias ejecutadas
   int16 i;
   
   setup_adc(adc_clock_div_2);
   setup_adc_ports(AN0); // Hay un sensor en AN0
   set_tris_a(0b00000001); // 1 entrada 0 salida
   set_tris_d(0b11110000);
   set_adc_channel(0);
   delay_us(10);
      
   while(true)
   {    
      if(pos == posE) // Ya no hay botones en la cola
      {
         output_low(LED); // Se apaga el led de la cola
         
         do
         {
            orden[pos] = SEC_I(); // Recibimos un posible boton
         }
         while(orden[pos] == 0);
         
         //if(orden[pos] != 0) // Si se recibio un boton presionado
            pos++;
      }
      else // Hay botones en cola, esperamos 2 segundos antes de reproducir el siguiente
      {       
         // Delay de 2000 ms esperando posible presion de boton
         for(i = 1; i <= 2000 ; i++)
         {
            delay_ms(1);
               
            orden[pos] = SEC_R(2000-i, &i); // Le envio los ms maximos que se puede atrapar el codigo. (ms totales - ms que han pasado)
               
            if(orden[pos] != 0) // Si se detecto un boton presionado
               pos++;
         }
      }
      
       // Ejecucion, va de uno en uno en el arreglo
      
      switch(orden[posE++])
      {
         case 1: // S1
            ROTAR(19);
         break;
         case 2: // S2
            ROTAR(50);
         break;
         case 3: // S3
            ROTAR(100);
         break;
         case 4: // S4
            ROTAR(125);
         break;
         default: // 0, no hace nada ni avanza al siguiente posE
         posE--; // Revertimos el incremento anterior pues no se ejecuto ningun caso
         break;
      }
   }
}

// Funcion para Rotacion de motor

// Problema cuando N es 1 (No es muy relevante)
void ROTAR(int16 N)
{
   int cont=0, pmotor = 1;
   int16 MS, i;
   
   // Hacer las N rotaciones
   
   while(cont < N)
   {
      // read_adc() al ser de 10 bits, recibe numeros en el intervalo (0:1023)
      MS = read_adc() * 2 + MIN; // Obtiene el valor del potenciometro
      
      // Queremos que los milisegundos esten en el intervalo establecido al inicio
      //MS = (MS * MAX) / 1023 + MIN; // Probar en fisico, no funciona en simulacion
      
      output_b(pmotor); // Mueve el motor 1 vez
      
      pmotor *= 2; // Pasamos al siguiente pin para la sig rotacion
      cont++; // Contador de rotaciones
      
      if(pmotor > 8)
         pmotor = 1;
         
      // Haremos el delay detectando cada milisegundo si se presiono un boton
      for(i = 1; i <= MS ; i++)
      {
         delay_ms(1);
         
         orden[pos] = SEC_R(MS-i, &i); // Le envio los ms maximos que se puede atrapar el codigo. (ms totales - ms que han pasado)
         
         if(orden[pos] != 0) // Si se detecto un boton y se guardo una posicion en la cola avanzamos
         {
            pos++;
            output_high(LED);
         }
      }
   }
   output_b(0);
   
   // Delay de 2 segundos
   
   for(i = 1; i <= 2000 ; i++)
   {
      delay_ms(1);
         
      orden[pos] = SEC_R(2000-i, &i); // Le envio los ms maximos que se puede atrapar el codigo. (ms totales - ms que han pasado)
         
      if(orden[pos] != 0) // Si se detecto un boton y se guardo una posicion en la cola avanzamos
      {
         pos++;
         output_high(LED);
      }
   }
   
   // Regresamos una posicion extra que avanzo
   
   if(pmotor == 1)
      pmotor = 8;
   else    
      pmotor /= 2;
   
   // Volvemos la origen
   
   cont = 0;
   
   while(cont < N)
   {
      // read_adc() al ser de 10 bits, recibe numeros en el intervalo (0:1023)
      MS = read_adc() * 2 + MIN; // Obtiene el valor del potenciometro
      
      // Queremos que los milisegundos esten en el intervalo establecido al inicio
      //MS = (MS * MAX) / 1023 + MIN; // Probar en fisico, no funciona en simulacion
      
      output_b(pmotor); // Mueve el motor 1 vez
      
      pmotor /= 2; // Pasamos al siguiente pin para la sig rotacion
      cont++; // Contador de rotaciones
      
      if(pmotor == 0)
         pmotor = 8;
         
      // Haremos el delay detectando cada milisegundo si se presiono un boton
      for(i = 1; i <= MS ; i++)
      {
         delay_ms(1);
         
         orden[pos] = SEC_R(MS-i, &i); // Le envio los ms maximos que se puede atrapar el codigo. (ms totales - ms que han pasado)
         
         if(orden[pos] != 0) // Si se detecto un boton y se guardo una posicion en la cola avanzamos
         {
            pos++;
            output_high(LED);
         }
      }
   }
   output_b(0);
}


// Funcion para Secuencia con delays (No envia el resultado de las comparaciones hasta que se suelte el boton)

int SEC_R(int16 MS, int16 *i)
{
   int r = 0;
   int16 time = 0;

   if(input(S1) && !input(S2) && !input(S3) && !input(S4)) // S1
   {
      while(input(S1) && (time < MS)) // Atrapamos el codigo mientras se presione el boton y no exceda los ms maximos
      {
         delay_ms(1);
         time++;
      }
      
      if(time < MS) // No se excedieron los ms maximos
         r = 1;
   }
   else if(!input(S1) && input(S2) && !input(S3) && !input(S4)) // S2
   {
      while(input(S2) && (time < MS)) // Atrapamos el codigo mientras se presione el boton y no exceda los ms maximos
      {
         time++;
         delay_ms(1);
      }
      
      if(time < MS)
         r = 2;
   }
   else if(!input(S1) && !input(S2) && input(S3) && !input(S4)) // S3
   {
      while(input(S3) && (time < MS)) // Atrapamos el codigo mientras se presione el boton y no exceda los ms maximos
      {
         time++;
         delay_ms(1);
      }
      
      if(time < MS)
         r = 3;
   }
   else if(!input(S1) && !input(S2) && !input(S3) && input(S4)) // S4
   {
      while(input(S4) && (time < MS)) // Atrapamos el codigo mientras se presione el boton y no exceda los ms maximos
      {
         time++;
         delay_ms(1);
      }
      
      if(time < MS)
         r = 4;
   }
   
   *i += time;
   
   return r;
}


// Funcion para Secuencia sin delays (No se genera cola)

int SEC_I()
{
   int r = 0, B = 1;
   
   if(input(S1) && !input(S2) && !input(S3) && !input(S4)) // S1
   {
      while(input(S1))
      {
         if(input(S2) || input(S3) || input(S4))
            B = 0;
      }
      
      if(B)
         r = 1;
   }
   else if(!input(S1) && input(S2) && !input(S3) && !input(S4)) // S2
   {
      while(input(S2))
      {
         if(input(S1) || input(S3) || input(S4))
            B = 0;
      }
      
      if(B)
         r = 2;
   }
   else if(!input(S1) && !input(S2) && input(S3) && !input(S4)) // S3
   {
      while(input(S3))
      {
         if(input(S1) || input(S2) || input(S4))
            B = 0;
      }
      
      if(B)
         r = 3;
   }
   else if(!input(S1) && !input(S2) && !input(S3) && input(S4)) // S4
   {
      while(input(S4))
      {
         if(input(S1) || input(S2) || input(S3))
            B = 0;
      }
      
      if(B)
         r = 4;
   }
   
   return r;
}
