#include <18f4550.h>   // Libreria del Microcontrolador
#device adc = 10 // Resolucion del ADC en bits
#fuses XT, NOWDT, NOPROTECT, NOLVP, CPUDIV1, PLL1 // Fusibles (Configuraciones del microcontrolador)
#use delay(clock = 4M)

#include <math.h>

void Acoplamiento();
void Display(float);
void Descomponer(int *, int *, int *, int *, float);

#define LED pin_d0
// Displays
#define D1 pin_e0
#define D2 pin_d4
#define D3 pin_d6
#define D4 pin_d7
// Botones
#define BOT1 pin_d2
#define BOT2 pin_d3
#define BOT3 pin_c6
#define BOT4 pin_c7
// Distancia Constante
#define MIN 10
#define MAX 30

int vec_c[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D,0x7D,0x07,0x7F,0x67}; // Numeros para display Catodo
int16 duty[] = {0, 500, 1000}; // Obtenidos con el excel
int MODO = 1; // Bandera para establecer el MODO

int16 dist_act, dist_prox;

void main()
{  
   // CONFIFGURACION DE ADC
   setup_adc(adc_clock_div_2); // Sincronizamos las frecuencias
   
   set_tris_a(0b00001111); // 1 entrada 0 salida
   
   // CONFIGURACION DE PWM
   setup_timer_2(T2_DIV_BY_4, 249, 1); // Primer parametro modificamos el preescalador
   setup_ccp1(CCP_PWM | CCP_PWM_HALF_BRIDGE, 5); // Activa el PMW en P1A y P1B. (Activar PWM, Modo de puente H, Desfase (En funcion de la cuenta del timer ))
   
   set_pwm1_duty(duty[1]);
   
   while(true)
   {   
      if(input(BOT1)) // Si se presiona el boton 1 (PREDETERMINADO)
         MODO = 1;
      if(input(BOT2))
         MODO = 2;
      
      // DISTANCIA ACTUAL
      setup_adc_ports(AN0_TO_AN1, VREF_VREF);
      set_adc_channel(1);
      delay_us(10);
      dist_act = read_adc();
      dist_act = -0.00000003229620007461189*pow(dist_act, 3) + 0.00007538158306830546*pow(dist_act, 2) - 0.067424472732382*dist_act + 34.548222503523704; // A partir del sensor obtenemos la distancia actual
      //dist_act = read_adc();
      
      //for(int i = 0; i < 25; i++)
        // Display(dist_act);
      
      if(MODO == 1) // MODO 1 POTENCIOMETRO (PREDETERMINADO)
      {
         // DISTANCIA PROXIMA
         setup_adc_ports(AN0_TO_AN1);
         set_adc_channel(0); // Lectura del Potenciometro (1023 -> 0)
         delay_us(10);
         dist_prox = read_adc() / 1023.0 * (MAX - MIN) + MIN;
      }
      else if(MODO == 2) // MODO 2 BOTONES 3 Y 4
      {  
         if(input(BOT3))
         {
            // DISTANCIA PROXIMA
            dist_prox = 15;
         }
         else if(input(BOT4))
         {
            // DISTANCIA PROXIMA
            dist_prox = 25;
         }
      }
      else {}
      
      // Cada ciclo despues de establecer la distancia proxima, hacemos acoplamiento
      
      if(dist_act != dist_prox)
      {
         output_high(LED); // LED de acoplamiento
         Acoplamiento();
      }  
      else
      {
         output_low(LED); // LED de acoplamiento
         set_pwm1_duty(duty[1]); // Detenemos el giro
      }
      
      Display(dist_prox);
   }
}

void Acoplamiento()
{
   int direccion;
   
   // Establecemos la direccion de giro
   
   if(dist_act < dist_prox)
      direccion = 0; // Izquierda
   else if(dist_act > dist_prox)
      direccion = 2; // Derecha
   
   // Configuramos el giro
   set_pwm1_duty(duty[direccion]);
}

void Display(float numero) // Tarda 20 ms
{ 
   int punto, n1, n2, n3, n4;
      
   // Se descompone en 4 numeros
   Descomponer( &n1, &n2, &n3, &n4, numero);
   
   // Los 4 numeros se distribuyen en el display
   
   // Encendemos primer display
   output_high(D2);
   output_high(D3);
   output_high(D4);
   output_low(D1);
   
   if(numero < 10) // Un digito y tres decimales
      punto = 128; // Le sumamos para que el bit que activa el punto se active
   else
      punto = 0;
   
   output_b(vec_c[n1] + punto);
   
   delay_ms(5);
   
   // Encendemos segundo display
   output_high(D1);
   output_high(D3);
   output_high(D4);
   output_low(D2);
   
   if(numero < 100 & !(numero < 10)) // Dos digitos y dos decimales
      punto = 128; // Le sumamos para que el bit que activa el punto se active
   else
      punto = 0;
   
   output_b(vec_c[n2] + punto);
   
   delay_ms(5);
   
   // Encendemos tercer display
   output_high(D1);
   output_high(D2);
   output_high(D4);
   output_low(D3);
   
   if((numero < 1000) && !(numero < 100) && !(numero < 10)) // Tres digitos y un decimal
      punto = 128; // Le sumamos para que el bit que activa el punto se active
   else
      punto = 0;
      
   output_b(vec_c[n3] + punto);
   
   delay_ms(5);
   
   // Encendemos cuarto display
   output_high(D1);
   output_high(D2);
   output_high(D3);
   output_low(D4);
      
   output_b(vec_c[n4]);
   
   delay_ms(5);
}

void Descomponer(int *n1, int *n2, int *n3, int *n4, float numero) // Buscar forma de acortar
{
   int16 entera;
   float aux, decimal;
   
   entera = (int16) numero; // Quitamos los decimales del numero
   decimal = numero - entera; // Quitamos la parte entera del numero
   
   if(numero < 10)
   {
      *n1 = entera; // Sacamos las unidades
      aux = decimal * 10; // Separamos el primer decimal 
      *n2 = (int) aux;
      aux -= (int) aux; // Borramos el primer decimal
      aux *= 10; // Separamos el segundo decimal
      *n3 = (int) aux;
      aux -= (int) aux; // Borramos el segundo decimal
      aux *= 10; // Separamos el tercer decimal
      *n4 = (int) aux;
   }
   else if(numero < 100)
   {
      *n1 = entera / 10; // Sacamos las decenas
      *n2 = entera - (*n1*10); // Sacamos las unidades
      aux = decimal * 10; // Separamos el primer decimal
      *n3 = (int) aux;
      aux -= (int) aux; // Borramos el primer decimal
      aux *= 10; // Separamos el segundo decimal
      *n4 = (int) aux;
   }
   else if(numero < 1000)
   {
      *n1 = entera / 100; // Sacamos las centenas
      *n2 = entera / 10;
      *n2 -= (*n1*10); // Sacamos las decenas
      *n3 = entera - ((*n1*100) + (*n2*10)); // Sacamos las unidades
      aux = decimal * 10; // Separamos el primer decimal
      *n4 = (int) aux;
   }
   else if(numero < 10000)
   {
      *n1 = entera / 1000; // Sacamos los millares
      *n2 = (entera - (*n1*1000)) / 100; // Sacamos las centenas
      *n3 = entera / 10;
      *n3 -= ((*n1*100) + (*n2*10)); // Sacamos las decenas
      *n4 = entera - ((*n1*1000) + (*n2*100) + (*n3*10)); // Sacamos las unidades
   }
}


// Ver como definir el tiempo muerto para evitar un microcorto. El tiempo muerto debe abarcar entre 1/100 -> 1/10 del periodo del PWM
      // PWM al 50% detiene el motor pues avanza lo mismo que retrocede
      // PWM < 50% gira el motor hacia un sentido
      // PWN > 50% gira el motor hacia el sentido contrario
      
      // Ver si hay que pasar gradualmente de un lado a otro o se puede poner el duty al 0 % y de golpe al 100 %
