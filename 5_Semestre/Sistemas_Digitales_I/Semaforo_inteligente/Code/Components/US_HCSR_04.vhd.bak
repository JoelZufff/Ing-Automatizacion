-- Componente que al tener EN en alto, envia constantemente la distancia medida por un ultrasonico 

------------------------------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
------------------------------------------------------------------------------
entity US_HCSR_04 is
    generic 
    (
        CLK_FREQ    : INTEGER
    );
    port
    (
        i_CLK           : in STD_LOGIC;             -- Señal de reloj base
        i_RST           : in STD_LOGIC;             -- Señal de reset
        
        o_DIST          : out INTEGER;              -- Distancia medida
        
        -- I/O fisicas de sensor ultrasonico HCSR-04
        i_ECHO          : in STD_LOGIC;             -- Envio de pulso ECHO
        o_TRIG          : out STD_LOGIC;            -- Trigger
    );
end US_HCSR_04;
------------------------------------------------------------------------------
architecture rtl of US_HCSR_04 is
    -- DIVISOR DE RELOJ --
        component CLK_DIV is
            generic 
            (
                clk_freq    : INTEGER          -- Frecuencia interna de FPGA (Hz)
            );
            port
            (
                i_out_freq      : INTEGER;              -- Frequencia deseada
                
                i_CLK           : in STD_LOGIC;         -- Señal de reloj base
                o_CLK           : out STD_LOGIC
            );
        end component;

        signal US_CLK   : STD_LOGIC;
        signal clks_t     : INTEGER := 0;
        signal clks_e     : INTEGER := 0;

        constant us_10 : INTEGER := 10;                                 -- Ciclos de reloj de 10 us
        constant ms_40 : INTEGER := 40000;                              -- Ciclos de reloj de 10 ms
    
    -- MAQUINA DE ESTADOS FINITOS --
        type trigger_states is (SEND_TRIGGER, WAIT_40MS);
        signal trigg_act_state : trigger_states := SEND_TRIGGER;      
        
        type echo_states is (WAIT_ECHO, GET_ECHO);
        signal echo_act_state : echo_states := WAIT_ECHO;
begin

    ------------------------------------------------------------------------------
                                -- DIVISOR DE RELOJ --
    ------------------------------------------------------------------------------
    c_US_CLK : CLK_DIV
    generic map ( clk_freq => clk_freq )
    port map ( i_out_freq => 1000000, i_CLK => i_CLK, o_CLK => US_CLK );

    ------------------------------------------------------------------------------
                            -- MAQUINA DE ESTADOS FINITOS --
    ------------------------------------------------------------------------------
    process (US_CLK, i_RST)
    begin
        if (i_RST = '1') then
            clks_t <= 0;
            trigg_act_state <= SEND_TRIGGER;
            
        elsif rising_edge(US_CLK) then
            case trigg_act_state is
                when SEND_TRIGGER =>
                    -- Salidas del estado
                    o_TRIG <= '1';

                    clks_t <= clks_t + 1;               -- Contamos 10 us de ciclos de reloj
                    
                    -- Estado siguiente
                    if (clks_t = us_10) then          -- Pasaron 10 us
                        clks_t <= 0;
                        trigg_act_state <= WAIT_40MS;
                    else
                        trigg_act_state <= SEND_TRIGGER;
                    end if;
                
                when WAIT_40MS =>
                    -- Salidas del estado
                    o_TRIG <= '0';
                    
                    clks_t <= clks_t + 1;                -- Contamos 10 ms de ciclos de reloj

                    -- Estado siguiente
                    if (clks_t = ms_40) then
                        clks_t <= 0;
                        tridgg_act_state <= SEND_TRIGGER;
                    else
                        trigg_act_state <= WAIT_40MS;
                    end if;
                    
                when others => null;
            end case;
        end if;

    end process;

    process (US_CLK, i_RST)
    begin
        if (i_RST = '1') then
            clks_e <= 0;
            o_DIST <= 0;
            echo_act_state <= WAIT_ECHO;
            
        elsif rising_edge(US_CLK) then
            case echo_states is
                when WAIT_ECHO =>
                    -- Estado siguiente
                    if (i_ECHO = '1') then          -- Si detectamos pulso echo
                        clks_e <= 0;
                        echo_states <= GET_ECHO;
                    else
                        echo_states <= WAIT_ECHO;
                    end if;

                when GET_ECHO =>
                    -- Contador
                    clks_e <= clks_e + 1;

                    -- Estado siguiente
                    if ((i_ECHO = '0') || (clks_e = ms_40)) then          -- Finalizo pulso ECHO
                        o_DIST <= clks_e;             -- REVISAR
                        --o_DIST <= clks_e * 34300 / 1000000;              -- Convertimos ciclos en distancia
                        
                        act_state <= WAIT_ECHO;
                    else
                        act_state <= GET_ECHO;
                    end if;

                when others => null;
            end case;
        end if;

    end process;

end architecture;