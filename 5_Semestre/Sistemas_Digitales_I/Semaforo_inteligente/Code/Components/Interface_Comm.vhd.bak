------------------------------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
------------------------------------------------------------------------------
entity Interface_Comm is
    generic 
    (
        CLK_FREQ    : INTEGER := 50000000
    );
    port
    (
        i_CLK           : in STD_LOGIC;             -- Se単al de reloj base
        i_RST           : in STD_LOGIC;             -- Se単al de reset

        -- I/O fisicos UART
        i_RX        : in STD_LOGIC;                             -- Receptor
        o_TX        : out STD_LOGIC                             -- Transmisor
    );
end Template;
------------------------------------------------------------------------------
architecture rtl of Interface_Comm is
    -- CONSTANTES --
        constant l_AA : STD_LOGIC_VECTOR(7 downto 0) := X"41";
        constant l_BB : STD_LOGIC_VECTOR(7 downto 0) := X"42";
        constant l_CC : STD_LOGIC_VECTOR(7 downto 0) := X"43";
        constant l_DD : STD_LOGIC_VECTOR(7 downto 0) := X"44";
        constant l_EE : STD_LOGIC_VECTOR(7 downto 0) := X"45";
        constant l_FF : STD_LOGIC_VECTOR(7 downto 0) := X"46";
        constant l_GG : STD_LOGIC_VECTOR(7 downto 0) := X"47";
        constant l_HH : STD_LOGIC_VECTOR(7 downto 0) := X"48";
        constant l_II : STD_LOGIC_VECTOR(7 downto 0) := X"49";
        constant l_JJ : STD_LOGIC_VECTOR(7 downto 0) := X"4A";
        constant l_KK : STD_LOGIC_VECTOR(7 downto 0) := X"4B";
        constant l_LL : STD_LOGIC_VECTOR(7 downto 0) := X"4C";
        constant l_MM : STD_LOGIC_VECTOR(7 downto 0) := X"4D";
        constant l_NN : STD_LOGIC_VECTOR(7 downto 0) := X"4E";
        constant l_OO : STD_LOGIC_VECTOR(7 downto 0) := X"4F";
        constant l_PP : STD_LOGIC_VECTOR(7 downto 0) := X"50";
        constant l_QQ : STD_LOGIC_VECTOR(7 downto 0) := X"51";
        constant l_RR : STD_LOGIC_VECTOR(7 downto 0) := X"52";
        constant l_SS : STD_LOGIC_VECTOR(7 downto 0) := X"53";
        constant l_TT : STD_LOGIC_VECTOR(7 downto 0) := X"54";
        constant l_UU : STD_LOGIC_VECTOR(7 downto 0) := X"55";
        constant l_VV : STD_LOGIC_VECTOR(7 downto 0) := X"56";
        constant l_WW : STD_LOGIC_VECTOR(7 downto 0) := X"57";
        constant l_XX : STD_LOGIC_VECTOR(7 downto 0) := X"58";
        constant l_YY : STD_LOGIC_VECTOR(7 downto 0) := X"59";
        constant l_ZZ : STD_LOGIC_VECTOR(7 downto 0) := X"5A";

        constant l_a : STD_LOGIC_VECTOR(7 downto 0) := X"61";
        constant l_b : STD_LOGIC_VECTOR(7 downto 0) := X"62";
        constant l_c : STD_LOGIC_VECTOR(7 downto 0) := X"63";
        constant l_d : STD_LOGIC_VECTOR(7 downto 0) := X"64";
        constant l_e : STD_LOGIC_VECTOR(7 downto 0) := X"65";
        constant l_f : STD_LOGIC_VECTOR(7 downto 0) := X"66";
        constant l_g : STD_LOGIC_VECTOR(7 downto 0) := X"67";
        constant l_h : STD_LOGIC_VECTOR(7 downto 0) := X"68";
        constant l_i : STD_LOGIC_VECTOR(7 downto 0) := X"69";
        constant l_j : STD_LOGIC_VECTOR(7 downto 0) := X"6A";
        constant l_k : STD_LOGIC_VECTOR(7 downto 0) := X"6B";
        constant l_l : STD_LOGIC_VECTOR(7 downto 0) := X"6C";
        constant l_m : STD_LOGIC_VECTOR(7 downto 0) := X"6D";
        constant l_n : STD_LOGIC_VECTOR(7 downto 0) := X"6E";
        constant l_o : STD_LOGIC_VECTOR(7 downto 0) := X"6F";
        constant l_p : STD_LOGIC_VECTOR(7 downto 0) := X"70";
        constant l_q : STD_LOGIC_VECTOR(7 downto 0) := X"71";
        constant l_r : STD_LOGIC_VECTOR(7 downto 0) := X"72";
        constant l_s : STD_LOGIC_VECTOR(7 downto 0) := X"73";
        constant l_t : STD_LOGIC_VECTOR(7 downto 0) := X"74";
        constant l_u : STD_LOGIC_VECTOR(7 downto 0) := X"75";
        constant l_v : STD_LOGIC_VECTOR(7 downto 0) := X"76";
        constant l_w : STD_LOGIC_VECTOR(7 downto 0) := X"77";
        constant l_x : STD_LOGIC_VECTOR(7 downto 0) := X"78";
        constant l_y : STD_LOGIC_VECTOR(7 downto 0) := X"79";
        constant l_z : STD_LOGIC_VECTOR(7 downto 0) := X"7A";
        
        constant l_0 : STD_LOGIC_VECTOR(7 downto 0) := X"30";
        constant l_1 : STD_LOGIC_VECTOR(7 downto 0) := X"31";
        constant l_2 : STD_LOGIC_VECTOR(7 downto 0) := X"32";
        constant l_3 : STD_LOGIC_VECTOR(7 downto 0) := X"33";
        constant l_4 : STD_LOGIC_VECTOR(7 downto 0) := X"34";
        constant l_5 : STD_LOGIC_VECTOR(7 downto 0) := X"35";
        constant l_6 : STD_LOGIC_VECTOR(7 downto 0) := X"36";
        constant l_7 : STD_LOGIC_VECTOR(7 downto 0) := X"37";
        constant l_8 : STD_LOGIC_VECTOR(7 downto 0) := X"38";
        constant l_9 : STD_LOGIC_VECTOR(7 downto 0) := X"39";

        constant l_dot : STD_LOGIC_VECTOR(7 downto 0) := X"2E";
        constant l_plus : STD_LOGIC_VECTOR(7 downto 0) := X"2B";
        
        constant l_sp : STD_LOGIC_VECTOR(7 downto 0) := X"20";
        constant l_EL : STD_LOGIC_VECTOR(7 downto 0) := X"0A";      -- End Line

    -- DIVISOR DE RELOJ --
        component CLK_DIV is
            generic 
            (
                clk_freq    : INTEGER          -- Frecuencia interna de FPGA (Hz)
            );
            port
            (
                i_out_freq      : INTEGER;              -- Frequencia deseada  
                i_CLK           : in STD_LOGIC;         -- Se単al de reloj base
                o_CLK           : out STD_LOGIC
            );
        end component;

    signal INT_CLK : STD_LOGIC;

    -- MAQUINA DE ESTADOS FINITOS --
        type states is (IDLE);
        
        signal act_state : states := IDLE;
        signal TX_nxt_state : states;

    -- UART --
        component UART_TX_string
            generic 
            (
                baud_freq : INTEGER;
                clk_freq : INTEGER
            );
            port 
            (
                i_CLK : in STD_LOGIC;
                i_RST : in STD_LOGIC;
                i_string : in STD_LOGIC_VECTOR(623 downto 0);
                i_ST : in STD_LOGIC;
                o_RDY : out STD_LOGIC;
                o_TX : out STD_LOGIC
            );
        end component;

        signal TX_message  : STD_LOGIC_VECTOR(623 downto 0);
        signal TX_ST      : STD_LOGIC := '0';
        
        signal TX_RDY     : STD_LOGIC;

    -- DECODER BCD DE 4 BITS --
        component BCD_4bit
            port 
            (
                i_DATA : in std_logic_vector(3 downto 0);
                o_DATA : out std_logic_vector(3 downto 0)
            );
        end component;

        signal BCD_DATA_0, BCD_DATA_1, BCD_DATA_2, BCD_DATA_3, BCD_DATA_4, BCD_DATA_5, BCD_DATA_6 : STD_LOGIC_VECTOR(3 downto 0) := "0000";
        
        signal BCD_DATA     : std_logic_vector(9 downto 0) := "0000000000";     -- Salida de decoder

begin
    
    ------------------------------------------------------------------------------
                                    -- U A R T  T X --
    ------------------------------------------------------------------------------
    c_TX_message : UART_TX_string 
        generic map ( clk_freq => clk_freq, baud_freq => 9600 )
        port map ( i_RST => not i_RST, i_CLK => i_CLK, i_string => TX_message, i_ST => TX_ST, o_RDY => TX_RDY, o_TX => o_TX );

    ------------------------------------------------------------------------------
                                -- DIVISOR DE RELOJ --
    ------------------------------------------------------------------------------
    c_TEM_CLK : CLK_DIV
        generic map ( clk_freq => CLK_FREQ )
        port map ( i_out_freq => 1000000, i_CLK => i_CLK, o_CLK => INT_CLK );

    ------------------------------------------------------------------------------
                            -- MAQUINA DE ESTADOS FINITOS --
    ------------------------------------------------------------------------------
    process (INT_CLK, i_RST)
    begin
        if (i_RST = '1') then
            
        elsif rising_edge(INT_CLK) then
            case act_state is
                when TX_SEND =>                             -- Estado para mandar mensajes a TX
                    -- Salidas del estado
                    TX_ST <= '1';

                    -- Estado futuro
                    if (TX_RDY = '0') then                      -- Se esta imprimiendo el mensaje
                        act_state <= TX_nxt_state;
                    else
                        act_state <= TX_SEND;
                    end if;
                
                when SEND_TEMP =>
                    -- Salidas del estado
                    TX_ST <= '0'

                    TX_message <= l_plus & ;                         -- Enviamos se単al de transmision de datos y temperatura

                    -- Estado futuro
                    if (TX_RDY = '1') then
                        act_state <= TX_SEND;
                    else
                        act_state <= SEND_MESSAGE;
                    end if;

                when WAIT =>
                    
            
                when others => null;
            end case;
        end if;

    end process;

end architecture;