-- FALTA
    -- Ponerle entrada de RST a todos los componentes, y hacer que reinicie las se単ales y  maquinas de estado de forma asincrona

    -- Crear componente de LCD para enviar cadenas de caracteres
    -- Crear componente motor a pasos


    -- 1 switch de inicio y 1 de paro
        -- Cuando se presione paro, volvera a la posicion inicial y eliminar la cola de distancias
    -- 1 switches que modifiquen la velocidad del motor (0 = Baja, 1 = Alta)
    -- Comunicacion UART para seleccionar distancia

    -- IDLE: En espera de distancia deseada y presion de boton de start
        -- Mandar mensaje en la LCD cada vez que se detecte una distancia deseada
            -- Si solo se presiona un boton, mostrar en LCD el valor de la distancia de ese boton
        -- Detectara las distancias deseadas en funcion de los 3 botones de seleccion
        -- Si se presiona start y solo se detecta la presion de un boton (Ver funcion booleana XOR), almacenar distancia deseada y pasar a estado de COUPLING
    -- COUPLING: Acomplamiento de distancia actual con distancia deseada (Contar pasos recorridos)
        -- Se mantiene en este estado hasta recorrer los pasos de la distancia deseada
        -- Si se detecta una recepcion de distancia en este estado, se almacenara la distancia deseada en un arreglo de distancias proximas con un maximo de n distancias
    -- RESTING: Estado que pone distancia deseada en 0, espera 2 segundos en distancia deseada, y vuelve al estado de COUPLING

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
------------------------------------------------------------------------------
entity Practica_10 is
    port
    (
        i_FPGA_clk      : in STD_LOGIC;         -- Se単al de reloj base

    );
end Practica_10;

architecture rtl of Practica_10 is
    
    component CLK_DIV is
        generic 
        (
            clk_freq    : integer;          -- Frecuencia interna de FPGA (Hz)
        );
        port
        (
            i_out_freq      : integer;              -- Frequencia deseada
            
            i_FPGA_clk      : in STD_LOGIC;         -- Se単al de reloj base
            o_clk           : out STD_LOGIC    
        );
    end component;
    
    -- Se単ales para transicion de estados
    type states is (IDLE, START_BIT, DATA_BITS, PARITY_BIT, STOP_BIT);
    signal act_state, next_state: states := IDLE;
    signal UART_clk : STD_LOGIC;

begin

    UART_CLK : CLK_DIV 
    generic map
    (
        clk_freq => 50000000
    )
    port map
    (
        i_out_freq => 9600,        -- 9600 Hz
        
        i_FPGA_clk => i_FPGA_clk,
        o_clk => UART_CLK
    );

end architecture;